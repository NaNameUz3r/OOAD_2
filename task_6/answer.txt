1. Существуют ли ситуации, когда связи между модулями должны делаться публичными? 

Это зависит от конкретных требований и ограничений разрабатываемой программной системы. 
В общем случае, модули должны иметь четко определенные "обязанности", а их взаимодействие должно управляться через четко определенные интерфейсы. 

D некоторых ситуациях может потребоваться сделать связи между модулями публичными, например:

- Interoperability (Интероперабельность): если различным модулям необходимо взаимодействовать друг с другом, то публичность их связей будет обеспечивать так называемую "Loose coupling" и  возможность сохранить гибкость.
- Debugging (Отладка): если модулю необходимо взаимодействовать с другим модулем в целях отладки, то публичность связей может упростить процесс отладки.
- Testing: если модуль необходимо протестировать независимо от других модулей, публичность их связей может позволить тестировать модуль изолированно.
- Customization: если модуль необходимо кастомизировать в соответствии с конкретными требованиями, публичность его связей может упростить кастомизацию.

Более конкретные примеры:

- Plug-in architecture: в такой архитектуре различные модули (плагины) могут быть подключены к основной системе для расширения ее функциональности. 
  Кажется, что для этого связи между основной системой и подключаемыми модулями должны быть публичными.
- Event-driven системы: в системах, управляемых событиями, модулям могут отслеживать события и реагировать на них. 
- Микросервисная архитектура. Скорее всего в микросервисной архитектуре различным модулям нужно прозрачно взаимодействовать друг с другом по сети. 


2. Какие метрики вы бы предложили для количественной оценки принципов организации модулей? 

- Cohesion (согласованность): мера степени, в которой методы и данные модуля соотносятся друг с другом "по сути", и служат одной четко определенной цели. Обычно желательна высокая "cвязность" в смысле сohesion.
- Coupling (связность): мера взаимозависимости, в смысле "завязанности друг на друга", между модулями. Низкая связность, как правило, лучше, поскольку она упрощает сопровождение и модификацию системы.
- Size (размер): банальный размер модуля, в смысле количества строк кода.
- Responsibility (ответственность): некоторая мера количества и "типа" обязанностей модуля. Предрагается считать, что модуль с большим количеством обязанностей имеет низкую модульность, 
  поскольку он, вероятно, будет сложным и трудным в обслуживании.
- Reusability (Повторное использование): степень, в которой модуль можно использовать (в том числе и повторно) в нескольких системах или приложениях.


3. Если вы разрабатывали программы, в которых было хотя бы 3-5 классов, как бы вы оценили их модульность по этим метрикам? 

Опираясь на метрики описанные выше, попытаться оценить модульность можно, в первую очередь — идентифицировав модули (опредлеляем классы, составляющие нашу программную систему), и затем оцениваем\измеряем:

- сohesion-согласованность: нужно оценить степень, в которой элементы каждого модуля связаны друг с другом, и насколько согласованна их логка в смысле выполниния единой задачи. 
- сoupling-связность: ищем тесные связи, такие как чрезмерное (или вообще :) использование глобальных переменных, общих структур данных или прямой доступ к внутреннему состоянию классов.
- размер: смотрим на количество строк кода в каждом модуле. Пусть это не аксиома, но очень вероятно что =модули с большим количеством строк будут иметь низкую согласованность и высокую связанность.
- ответственность: оцениваем количество и тип обязанностей каждого модуля. Модули с большим количеством обязанностей, вероятно, будут иметь низкую согласованность.
- возможности повторного использования: оцениваем степень повторного использования каждого модуля в разных частях системы. Чем проще повторно использовать модуль (в идеале без модификации вообще), тем он, ну... "модульнее" :)

На основе полученных результатов из шагов выше мы можем оценить общую модульность программной системы. Цель состоит в том, чтобы модули были согласованными, слабо связанными, небольшими по размеру (если возможно), каждый со своей единой "зоной" ответственности и возможностью повторного использования.
