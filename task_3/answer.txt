В Python3 модули представлены .py файлами, содержащими код. Грубо говоря, любой .py файл является модулем.
Один модуль может быть импортирован другим модулем с помощью инструкции import. 

При импортировании модуля могут использоваться его переменные, функци и классы в импортирующем модуле. 
Классы в модуле рассматриваются как конструкция уровня этого модуля. 

Выходит что реализация "класса как модуля" здесь достаточно проста -- мы можем представить организацию класса, или семейства классов в отдельном файле-модуле,
и использовать их в других частях программы.


В Go тоже реализована концепция огранизации кода в модули (в пакеты).
Отличие тут в том, что пакет должен быть в отдельной директории, пакет может содержать всего один файл, но, как мне кажется, чаще это набор .go файлов. 
Каждый .go файл начинается со строки "объявления" пакета. Все фукции, переменные и типы в этом файле буду считаться частью декларированного в первой строке пакета.
Название директории с пакетом может отличаться от имени пакета в строке его декларирования, но это кажется плохой практикой.

В других частях программы можно имортировать пакет, импортирую его по его  декларированному имени.    
