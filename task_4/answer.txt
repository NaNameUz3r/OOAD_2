Возьмем затертый пример -- Иерархия классов транспортных средств.

    Базовый класс: Vehicle
        Базовый класс Vehicle "частично открыт" для расширения, в том смысле, что новые типы транспортных средств могут добавляться (наследоваться) как подклассы без измнения базового класса.
        Тогда как реализация базового класса должна быть скрыта, то некоторые методы, например метод вычисления времени путешествия будет открыт
        для расширения, в том смысле, что конкретные подклассы базового класса могут перегружать этот "открытый" метод с имплементаций собственной логики вычисления времени путешествия, и тд.
        Детали реализации базового класса должны быть "скрыты от расширения", потому что изменение изменят "поведение" всех классов-наследников, что может, и скорее всего
        приведет к непредвиденным изменениям в системе (например её полной неработоспособности :). Выходит что базовый класс больше закрыт, чем открыт ¯\_(ツ)_/¯

    Подклассы: Car, Boat, Airplane
        Конкретние подклассы базового класса открыты, потому что могут добавляться новые модели транспортных средств как "под-подклассы", и обладать совершенно разными характеристиками.
        Тут, открытым методом в подклассе, может быть, например, метод расчета потребления топлива, который будет перегружаться и имплементироваться по разному Машиной-седаном и моторной лодкой.
 
    Любые классы-наследники, имплементирующие конкретные брэнды и модели транспортных средств.
        Все эти классы должны быть закрыты, потому что представляют конкретную "транспортную" сущность. Любые изменения в имплементацию такой конкретной "модели" потребуют внесения изменений
        в родительские "подклассы", что противоречит OCP. Да и в принципе, такие классы отражают "вещь в себе", имеющей некоторые стандартные характеристики и поведение.
        Сохраняя такие классы закрытыми мы поддерживаем код стабильным и обслуживаемым, так как детали реализации конкретной "модели" никак не влияют на другие части программы.


    Хорошо спроекированная таким образом система классов позволяет легко расширять систему, добавляя новые транспортные средства без внесения правок (или без внесения существенных правок, в идеале вообще
    внесения правок только в одно место) в существующий код. 
     